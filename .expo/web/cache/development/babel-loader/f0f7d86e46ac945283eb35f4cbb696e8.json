{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\iTech\\\\source\\\\repos\\\\playground-app\\\\components\\\\LoadingScreen.jsx\";\nimport React, { useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppLoading, SplashScreen } from 'expo';\nimport { Asset } from 'expo-asset';\nexport default function LoadingScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSplashReady = _useState2[0],\n      setIsSplashReady = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAppReady = _useState4[0],\n      setIsAppReady = _useState4[1];\n\n  if (isSplashReady) {\n    return React.createElement(AppLoading, {\n      startAsync: cacheSplashResourcesAsync,\n      onFinish: function onFinish() {\n        return setIsSplashReady(true);\n      },\n      onError: console.warn,\n      autoHideSplash: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      }\n    });\n  }\n\n  if (!isAppReady) {\n    return React.createElement(View, {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/loadingIcon.png\"),\n      onLoad: cacheResourcesAsync,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      }\n    }));\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/loadingIcon.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    }\n  }), React.createElement(Image, {\n    source: require(\"../assets/loadingIcon.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    }\n  }));\n\n  function cacheSplashResourcesAsync() {\n    var gif;\n    return _regeneratorRuntime.async(function cacheSplashResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            gif = require(\"../assets/loadingIcon.png\");\n            return _context.abrupt(\"return\", Asset.fromModule(gif).downloadAsync());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  ;\n\n  function cacheResourcesAsync() {\n    var images, cacheImages;\n    return _regeneratorRuntime.async(function cacheResourcesAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            SplashScreen.hide();\n            images = [require(\"../assets/loadingIcon.png\"), require(\"../assets/loadingIcon.png\")];\n            cacheImages = images.map(function (image) {\n              return Asset.fromModule(image).downloadAsync();\n            });\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(Promise.all(cacheImages));\n\n          case 5:\n            setIsAppReady(true);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  ;\n}","map":{"version":3,"sources":["C:/Users/iTech/source/repos/playground-app/components/LoadingScreen.jsx"],"names":["React","useState","AppLoading","SplashScreen","Asset","LoadingScreen","isSplashReady","setIsSplashReady","isAppReady","setIsAppReady","cacheSplashResourcesAsync","console","warn","flex","require","cacheResourcesAsync","gif","fromModule","downloadAsync","hide","images","cacheImages","map","image","Promise","all"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;;;;AAEA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,MAAzC;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA,kBAECJ,QAAQ,CAAC,KAAD,CAFT;AAAA;AAAA,MAEjCK,aAFiC;AAAA,MAEnBC,gBAFmB;;AAAA,mBAGLN,QAAQ,CAAC,KAAD,CAHH;AAAA;AAAA,MAGjCO,UAHiC;AAAA,MAGtBC,aAHsB;;AAUpC,MAAIH,aAAJ,EAAmB;AACjB,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEI,yBADd;AAEE,MAAA,QAAQ,EAAE;AAAA,eAAMH,gBAAgB,CAAC,IAAD,CAAtB;AAAA,OAFZ;AAGE,MAAA,OAAO,EAAEI,OAAO,CAACC,IAHnB;AAIE,MAAA,cAAc,EAAE,KAJlB;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AAED,MAAI,CAACJ,UAAL,EAAiB;AACf,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,MAAM,EAAEC,OAAO,6BADjB;AAEE,MAAA,MAAM,EAAEC,mBAFV;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAQD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEF,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEC,OAAO,6BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEA,OAAO,6BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;;AAQF,WAAeJ,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQM,YAAAA,GADR,GACcF,OAAO,6BADrB;AAAA,6CAESV,KAAK,CAACa,UAAN,CAAiBD,GAAjB,EAAsBE,aAAtB,EAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGC;;AAED,WAAeH,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEZ,YAAAA,YAAY,CAACgB,IAAb;AACMC,YAAAA,MAFR,GAEiB,CACbN,OAAO,6BADM,EAEbA,OAAO,6BAFM,CAFjB;AAOQO,YAAAA,WAPR,GAOsBD,MAAM,CAACE,GAAP,CAAW,UAAAC,KAAK,EAAI;AACtC,qBAAOnB,KAAK,CAACa,UAAN,CAAiBM,KAAjB,EAAwBL,aAAxB,EAAP;AACD,aAFmB,CAPtB;AAAA;AAAA,6CAWQM,OAAO,CAACC,GAAR,CAAYJ,WAAZ,CAXR;;AAAA;AAYEZ,YAAAA,aAAa,CAAC,IAAD,CAAb;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaC;AACF","sourcesContent":["import React,{ useState } from 'react';\r\nimport { Image, Text, View } from 'react-native';\r\nimport { AppLoading, SplashScreen } from 'expo';\r\nimport { Asset } from 'expo-asset';\r\n\r\nexport default function LoadingScreen() {\r\n\r\nconst [isSplashReady,setIsSplashReady] = useState(false);\r\nconst [isAppReady,setIsAppReady] = useState(false);\r\n    //   state = {\r\n//     isSplashReady: false,\r\n//     : false,\r\n//   };\r\n\r\n  \r\n    if (isSplashReady) {\r\n      return (\r\n        <AppLoading\r\n          startAsync={cacheSplashResourcesAsync}\r\n          onFinish={() => setIsSplashReady(true)}\r\n          onError={console.warn}\r\n          autoHideSplash={false}\r\n        />\r\n      );\r\n    }\r\n\r\n    if (!isAppReady) {\r\n      return (\r\n        <View style={{ flex: 1 }}>\r\n          <Image\r\n            source={require('../assets/loadingIcon.png')}\r\n            onLoad={cacheResourcesAsync}\r\n          />\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <View style={{ flex: 1 }}>\r\n        <Image source={require('../assets/loadingIcon.png')} />\r\n        <Image source={require('../assets/loadingIcon.png')} />\r\n      </View>\r\n    );\r\n  \r\n\r\n  async function cacheSplashResourcesAsync () {\r\n    const gif = require('../assets/loadingIcon.png');\r\n    return Asset.fromModule(gif).downloadAsync();\r\n  };\r\n\r\n  async function cacheResourcesAsync() {\r\n    SplashScreen.hide();\r\n    const images = [\r\n      require('../assets/loadingIcon.png'),\r\n      require('../assets/loadingIcon.png'),\r\n    ];\r\n\r\n    const cacheImages = images.map(image => {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    });\r\n\r\n    await Promise.all(cacheImages);\r\n    setIsAppReady(true);\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}